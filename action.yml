# Build Swift Packages
#
# Made by: Wesley de Groot 
# Email: email+gha@wesleydegroot.nl

name: 'Build Swift Packages'
description: 'Build Swift Packages (SPM Packages)'
author: 'Wesley de Groot <email+gha@wesleydegroot.nl>'

inputs:
  product:
    description: 'Package name'
    required: false
    default: '__AUTO__'
  iOS:
    description: 'Should build for iOS'
    required: false
    default: true
  watchOS:
    description: 'Should build for watchOS'
    required: false
    default: true
  tvOS:
    description: 'Should build for tvOS'
    required: false
    default: true
  visionOS:
    description: 'Should build for visionOS'
    required: false
    default: true
  macOS:
    description: 'Should build for macOS'
    required: false
    default: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up variables
      id: setup
      shell: bash
      run: |
        if [[ "${{ inputs.product }}" == "__AUTO__" ]]
        then
          # Automatically get package name
          PRODUCT_NAME=`cat Package.swift | grep -m1 "name" | awk -F'"' '{print $2}'`
        else
          # Use provided product name
          PRODUCT_NAME="${{ inputs.product }}"
        fi
        echo "PRODUCT_NAME=$PRODUCT_NAME" >> $GITHUB_ENV

        buildForiOS="false"
        buildForwatchOS="false"
        buildFortvOS="false"
        buildForMacCatalyst="false"
        buildForvisionOS="false"
        buildFormacOS="false"
        buildForLinux="false"
        buildForWindows="false" # Not supported right now
        buildForAndroid="false" # Not supported right now
        buildForDriverKit="false" # Not supported right now
        
        if grep -Rq "\.iOS" Package.swift ; then
          buildForiOS="true"
        fi
        echo "buildForiOS=$buildForiOS" >> $GITHUB_ENV

        if grep -Rq "\.watchOS" Package.swift ; then
          buildForwatchOS="true"
        fi
        echo "buildForwatchOS=$buildForwatchOS" >> $GITHUB_ENV

        if grep -Rq "\.tvOS" Package.swift ; then
          buildFortvOS="true"
        fi
        echo "buildFortvOS=$buildFortvOS" >> $GITHUB_ENV

        if grep -Rq "\.maccatalyst" Package.swift ; then
          buildForMacCatalyst="true"
        fi
        echo "buildForMacCatalyst=$buildForMacCatalyst" >> $GITHUB_ENV
        
        if grep -Rq "\.visionOS" Package.swift ; then
          buildForvisionOS="true"
        fi
        echo "buildForvisionOS=$buildForvisionOS" >> $GITHUB_ENV

        if grep -Rq "\.macOS" Package.swift ; then
          buildFormacOS="true"
        fi
        echo "buildFormacOS=$buildFormacOS" >> $GITHUB_ENV

        if grep -Rq "\.linux" Package.swift ; then
          buildForLinux="true"
        fi
        echo "buildForLinux=$buildForLinux" >> $GITHUB_ENV

        if grep -Rq "\.windows" Package.swift ; then
          buildForWindows="true"
        fi
        echo "buildForWindows=$buildForWindows" >> $GITHUB_ENV

        if grep -Rq "\.android" Package.swift ; then
          buildForAndroid="true"
        fi
        echo "buildForAndroid=$buildForAndroid" >> $GITHUB_ENV

        if grep -Rq "\.driverkit" Package.swift ; then
          buildForDriverKit="true"
        fi
        echo "buildForDriverKit=$buildForDriverKit" >> $GITHUB_ENV
        
    - name: Build for iOS
      shell: bash
      if: ${{ env.buildForiOS == true || env.buildForiOS == 'true' }}
      run: |
        echo "::group::Build for iOS"
        xcrun xcodebuild clean build -quiet -scheme "$PRODUCT_NAME" -destination generic/platform=iOS
        echo "::endgroup::"

    - name: Build for watchOS
      shell: bash
      if: ${{ env.buildForwatchOS == true || env.buildForwatchOS == 'true' }}
      run: |
        echo "::group::Build for watchOS"
        xcrun xcodebuild clean build -quiet -scheme "$PRODUCT_NAME" -destination generic/platform=watchOS
        echo "::endgroup::"

    - name: Build for tvOS
      shell: bash
      if: ${{ env.buildFortvOS == true || env.buildFortvOS == 'true' }}
      run: |
        echo "::group::Build for tvOS"
        xcrun xcodebuild clean build -quiet -scheme "$PRODUCT_NAME" -destination generic/platform=tvOS
        echo "::endgroup::"
        
    - name: Build for MacCatalyst
      shell: bash
      if: ${{ env.buildForMacCatalyst == true || env.buildForMacCatalyst == 'true' }}
      run: |
        echo "::group::Build for MacCatalyst"
        xcrun xcodebuild clean build -quiet -scheme "$PRODUCT_NAME" -destination generic/platform=MacCatalyst
        echo "::endgroup::"
        
    - name: Build for visionOS
      shell: bash
      if: ${{ env.buildForvisionOS == true || env.buildForvisionOS == 'true' }}
      run: |
        echo "::group::Build for visionOS"
        xcrun xcodebuild clean build -quiet -scheme "$PRODUCT_NAME" -destination generic/platform=xrOS
        echo "::endgroup::"

    - name: Build for macOS
      shell: bash
      if: ${{ env.buildFormacOS == true || env.buildFormacOS == 'true' }}
      run: |
        echo "::group::Build for macOS"
        swift build
        echo "::endgroup::"

    - name: Build for Linux
      if: ${{ env.buildForLinux == true || env.buildForLinux == 'true' }}
      shell: bash
    #   runs-on: ubuntu-latest
    #   run: swift build
      run: |
        echo "::group::Build for Linux"
        echo "Not supported yet"
        echo "::endgroup::"

    - name: Build for Windows
      if: ${{ env.buildForWindows == true || env.buildForWindows == 'true' }}
      shell: bash
    #   runs-on: ubuntu-latest
    #   run: swift build
      run: |
        echo "::group::Build for Windows"
        echo "Not supported yet"
        echo "::endgroup::"

    - name: Build for Android
      if: ${{ env.buildForAndroid == true || env.buildForAndroid == 'true' }}
      shell: bash
    #   runs-on: ubuntu-latest
    #   run: swift build
      run: |
        echo "::group::Build for Android"
        echo "Not supported yet"
        echo "::endgroup::"

    - name: Build for DriverKit
      if: ${{ env.buildForDriverKit == true || env.buildForDriverKit == 'true' }}
      shell: bash
    #   runs-on: ubuntu-latest
    #   run: swift build
      run: |
        echo "::group::Build for DriverKit"
        echo "Not supported yet"
        echo "::endgroup::"
        
branding:
  icon: "upload-cloud"
  color: "blue"
